// <auto-generated />
using System;
using A1.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace A1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240107213712_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("A1.data.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name_ar");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name_en");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.HasKey("Id");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("A1.data.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("AddressAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_ar");

                    b.Property<string>("AddressEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_en");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("company_id");

                    b.Property<string>("ConditionsAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("conditions_ar");

                    b.Property<string>("ConditionsEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("conditions_en");

                    b.Property<bool>("EvCharge")
                        .HasColumnType("bit")
                        .HasColumnName("ev_charge");

                    b.Property<bool>("Fuel80")
                        .HasColumnType("bit")
                        .HasColumnName("fuel80");

                    b.Property<bool>("Fuel92")
                        .HasColumnType("bit")
                        .HasColumnName("fuel92");

                    b.Property<bool>("Fuel95")
                        .HasColumnType("bit")
                        .HasColumnName("fuel95");

                    b.Property<bool>("Fuel98")
                        .HasColumnType("bit")
                        .HasColumnName("fuel98");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("InvestNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("invest_number");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lat");

                    b.Property<string>("Layout")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("layout");

                    b.Property<string>("Lng")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lng");

                    b.Property<string>("MoreServices")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("more_services");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name_ar");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name_en");

                    b.Property<bool>("NaturalGas")
                        .HasColumnType("bit")
                        .HasColumnName("natural_gaz");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.Property<bool>("Solar")
                        .HasColumnType("bit")
                        .HasColumnName("solar");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("stations");
                });

            modelBuilder.Entity("A1.data.Entities.Station", b =>
                {
                    b.HasOne("A1.data.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
